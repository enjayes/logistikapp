/**
 * dataController.
 *
 * >>Description<<
 *
 * @author Manfred
 * @date 21.11.14 - 12:26
 * @copyright munichDev UG
 */


dataController = {
    mysql: null,
    adminController: null,
    init: function (mysql, adminController) {
        this.mysql = mysql;
        this.adminController = adminController;

    },
    handleMessage: function (client, data) {

        console.log("Website: Message " + data.t)
        if (data.t.substr(0, 1) == "j") {
            dataController.job.handleMessage(client, data)

        }


    },

    job: {
        messageType: {
            getAll: "jga",
            create: "jc",
            update: "ju",
            delete: "jd",
            get: "jg",
            updateOthers: "luo"
        },
        convertFromSQL: function (sqlJob) {
            return {
                id: sqlJob.id
                //TODO
            }

        },
        convertToSQL: function (job) {
            return {
                id: job.id
                //TODO
            }
        },
        handleMessage: function (client, data) {
            var job, sqlJob;

            if (data.t == this.messageType.getAll) {
                dataController.mysql.query('SELECT * FROM Jobs', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var jobs = [];
                            for (var i = 0; i < rows.length; i++) {
                                jobs.push(dataController.job.convertFromSQL(rows[i]));
                            }
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                job = data.j;
                if (job) {
                    sqlJob = dataController.job.convertToSQL(job);
                    dataController.mysql.query('INSERT INTO Jobs SET ?', sqlJob, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.job.informOtherClients(client);


                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                job = data.j;

                if (job) {

                    sqlJob = dataController.job.convertToSQL(job);
                    dataController.mysql.query("UPDATE Jobs SET ? WHERE id = ? ", [sqlJob, sqlJob.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(client);

                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                job = data.l;
                if (job) {
                    dataController.mysql.query('DELETE FROM Jobs WHERE id = ?', job.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(client);


                        }
                    });
                }
            }

        }, informOtherClients: function (client) {

            if (dataController.adminController.clients.length > 1) {


                //Send list of all Jobs to ohter clients
                dataController.mysql.query('SELECT * FROM Jobs', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var jobs = [];
                            for (var i = 0; i < rows.length; i++) {
                                jobs.push(dataController.job.convertFromSQL(rows[i]));
                            }
                            var clients = dataController.adminController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {

                                actClient.socket.emit('message', {t: dataController.job.messageType.updateOthers, l: jobs});

                            });


                        }
                    }
                });

            }

        }

    }

}

module.exports = dataController;