/**
 * dataController.
 *
 * >>Description<<
 *
 * @author Manfred
 * @date 21.11.14 - 12:26
 * @copyright munichDev UG
 */


dataController = {
    mysql: null,
    adminController: null,
    init: function (mysql, adminController) {
        this.mysql = mysql;
        this.adminController = adminController;

    },
    handleMessage: function (client, data) {

        console.log("Website: Message " + data.t)
        if (data.t.substr(0, 1) == "j") {
            dataController.job.handleMessage(client, data)

        }


    },

    job: {
        messageType: {
            getAll: "jga",
            create: "jc",
            update: "ju",
            delete: "jd",
            get: "jg",
            updateOthers: "luo"
        },
        convertFromSQL: function (sqlJob) {
            return {
                id: sqlJob.id,
                vorname: sqlJob.Vorname,
                name: sqlJob.Name,
                telefon: sqlJob.Telefon,
                email: sqlJob.EMail,
                adresse: sqlJob.Adresse,
                notizen: sqlJob.Notizen
            }

        },
        convertToSQL: function (lieferant) {
            return {
                id: lieferant.id,
                Vorname: lieferant.vorname,
                Name: lieferant.name,
                Telefon: lieferant.telefon,
                EMail: lieferant.email,
                Adresse: lieferant.adresse,
                Notizen: lieferant.notizen
            }
        },
        handleMessage: function (client, data) {
            var lieferant, sqlJob;

            if (data.t == this.messageType.getAll) {
                dataController.mysql.query('SELECT * FROM Jobs', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var jobs = [];
                            for (var i = 0; i < rows.length; i++) {
                                jobs.push(dataController.lieferant.convertFromSQL(rows[i]));
                            }
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                job = data.j;
                if (job) {
                    sqlJob = dataController.lieferant.convertToSQL(job);
                    dataController.mysql.query('INSERT INTO Jobs SET ?', sqlJob, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.job.informOtherClients(client);


                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                lieferant = data.l;

                if (lieferant) {

                    sqlJob = dataController.lieferant.convertToSQL(lieferant);
                    dataController.mysql.query("UPDATE Jobs SET ? WHERE id = ? ", [sqlJob, sqlJob.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(client);

                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                lieferant = data.l;
                if (lieferant) {
                    dataController.mysql.query('DELETE FROM Jobs WHERE id = ?', lieferant.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(client);


                        }
                    });
                }
            }

        }, informOtherClients: function (client) {

            if (dataController.adminController.clients.length > 1) {


                //Send list of all Jobs to ohter clients
                dataController.mysql.query('SELECT * FROM Jobs', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var jobs = [];
                            for (var i = 0; i < rows.length; i++) {
                                jobs.push(dataController.lieferant.convertFromSQL(rows[i]));
                            }
                            var clients = dataController.adminController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {

                                actClient.socket.emit('message', {t: dataController.lieferant.messageType.updateOthers, l: jobs});

                            });


                        }
                    }
                });

            }

        }

    },
    termin: {
        messageType: {
            getAll: "tga",
            create: "tc",
            update: "tu",
            delete: "td",
            get: "tg",
            updateOthers: "tuo"
        },
        convertFromSQL: function (sqlTermin) {

            var newTermin = {
                id: sqlTermin.id,
                title: sqlTermin.Title,
                start: sqlTermin.Start,
                allDay: sqlTermin.AllDay,
                notizen: sqlTermin.Notizen,
                lieferant: sqlTermin.Job

            }

            if (sqlTermin.end != "")
                newTermin.end = sqlTermin.End;
            else
                newTermin.end = undefined;

            return newTermin;
        },
        convertToSQL: function (termin) {

            return {
                id: termin.id,
                Title: termin.title,
                Start: termin.start,
                End: termin.end,
                AllDay: termin.allDay,
                Notizen: termin.notizen,
                Job: termin.lieferant

            }

        },
        handleMessage: function (client, data) {
            var termin, sqlTermin;

            if (data.t == this.messageType.getAll) {
                dataController.mysql.query('SELECT * FROM Termine', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var termine = [];
                            for (var i = 0; i < rows.length; i++) {
                                termine.push(dataController.termin.convertFromSQL(rows[i]));
                            }
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: termine});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                termin = data.l;
                if (termin) {
                    sqlTermin = dataController.termin.convertToSQL(termin);
                    dataController.mysql.query('INSERT INTO Termine SET ?', sqlTermin, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(client);

                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                termin = data.l;

                if (termin) {

                    sqlTermin = dataController.termin.convertToSQL(termin);

                    dataController.mysql.query("UPDATE Termine SET ? WHERE id = ? ", [sqlTermin, sqlTermin.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(client);
                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                termin = data.l;
                if (termin) {
                    dataController.mysql.query('DELETE FROM Termine WHERE id = ?', termin.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(client);
                        }
                    });
                }
            }
        }, informOtherClients: function (client) {

            if (dataController.adminController.clients.length > 1) {


                //Send list of all termine to ohter clients
                dataController.mysql.query('SELECT * FROM Termine', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var termine = [];
                            for (var i = 0; i < rows.length; i++) {
                                termine.push(dataController.termin.convertFromSQL(rows[i]));
                            }


                            var clients = dataController.adminController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {

                                actClient.socket.emit('message', {t: dataController.termin.messageType.updateOthers, e: termine});

                            });


                        }
                    }
                });

            }

        }
    },

    nachricht: {
        messageType: {
            getAll: "nga",
            create: "nc",
            delete: "nd",
            updateOthers: "nuo"
        },
        convertFromSQL: function (sqlNachricht) {
            return {
                id: sqlNachricht.id,
                datum: parseInt(sqlNachricht.datum),
                nachricht: sqlNachricht.nachricht
            }

        },
        convertToSQL: function (nachricht) {
            return {
                id: nachricht.id,
                datum: nachricht.datum,
                nachricht: nachricht.nachricht
            }
        },
        //Get all the Messages, joins messages and receipients
        getAllAdminNachrichten: function (callback) {
            if (!callback)
                return;
            dataController.mysql.query('SELECT * FROM Adminnachrichtgesendet ORDER BY datum DESC' , function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {
                    if (rows) {

                        var getJobs = function (nachrichten, position) {

                            if (position == nachrichten.length)
                                callback([]);
                            else {
                                nachrichten[position] = dataController.nachricht.convertFromSQL(nachrichten[position]);

                                dataController.mysql.query('SELECT * FROM Adminlieferantnachricht WHERE nachrichtenid = ?', nachrichten[position].id, function (err, rows, fields) {
                                    if (err)
                                        console.log("MYSQL ERROR: " + err);
                                    else {
                                        if (rows) {

                                            nachrichten[position].jobs = [];
                                            for (var i = 0; i < rows.length; i++) {
                                                nachrichten[position].jobs.push({lieferantid: rows[i].lieferantid, read: rows[i].read==1?true:false});

                                            }


                                            if (position == nachrichten.length - 1) {
                                                callback(nachrichten)
                                            }
                                            else
                                                getJobs(nachrichten, position + 1);
                                        }
                                    }
                                });
                            }
                        }
                        getJobs(rows, 0);

                    }
                }
            });
        }, handleMessage: function (client, data) {

            var nachricht, sqlNachricht;

            if (data.t == this.messageType.getAll) {

                dataController.nachricht.getAllAdminNachrichten(function (nachrichten) {
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: nachrichten});

                })

            } else if (data.t == this.messageType.create) {

                nachricht = data.n;
                if (nachricht) {

                    sqlNachricht = dataController.nachricht.convertToSQL(nachricht);

                    dataController.mysql.query('INSERT INTO Adminnachrichtgesendet SET ?', sqlNachricht, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            for (var i = 0; i < nachricht.jobs.length; i++) {
                                var lieferantId = nachricht.jobs[i].lieferantid;
                                var insertData = {lieferantid: lieferantId, nachrichtenid: nachricht.id};
                                dataController.mysql.query('INSERT INTO Adminlieferantnachricht SET ?', insertData, function (err, result) {
                                    if (err)
                                        console.log("MYSQL ERROR: " + err);
                                    else {

                                        dataController.nachricht.informOtherClients(client);

                                    }
                                });

                            }

                        }
                    });
                }
            } else if (data.t == this.messageType.delete) {

                nachricht = data.n;
                if (nachricht) {
                    dataController.mysql.query('DELETE FROM Adminnachrichtgesendet WHERE id = ?', nachricht.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.mysql.query('DELETE FROM Adminlieferantnachricht WHERE nachrichtenid = ?', nachricht.id, function (err, result) {
                                if (err)
                                    console.log("MYSQL ERROR: " + err);
                                else {

                                    dataController.nachricht.informOtherClients(client);

                                }
                            });
                        }
                    });
                }


            }
        }, informOtherClients: function (client) {

            if (dataController.adminController.clients.length > 1) {

                dataController.nachricht.getAllAdminNachrichten(function (nachrichten) {

                    var clients = dataController.adminController.clients.filter(function (element) {
                        return (element.socket != client.socket)
                    });

                    clients.forEach(function (actClient) {
                        actClient.socket.emit('message', {t: dataController.nachricht.messageType.updateOthers, n: nachrichten});
                    });

                })


            }

        }

    },
    antwortNachricht: {
        messageType: {
            getAll: "aga",
            update: "au",
            delete: "ad",
            updateOthers: "auo"
        },
        convertFromSQL: function (sqlNachricht) {

            return {
                id: sqlNachricht.id,
                lieferantid: sqlNachricht.lieferantid,

                read: sqlNachricht.read==1?true:false,

                datum: parseInt(sqlNachricht.datum),

                nachricht: sqlNachricht.nachricht
            }

        },
        convertToSQL: function (nachricht) {
            return {
                id: nachricht.id,
                lieferantid: nachricht.lieferantid,
                read: nachricht.read==true?1:0,
                datum: nachricht.datum,
                nachricht: nachricht.nachricht
            }
        },
        getAllAdminNachrichten: function (callback) {
            if (!callback)
                return;
            dataController.mysql.query('SELECT * FROM Jobnachrichtgesendet  ORDER BY datum DESC', function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {
                    if (rows) {

                        var nachrichten = [];
                        for (var i = 0; i < rows.length; i++) {
                            nachrichten.push(dataController.antwortNachricht.convertFromSQL(rows[i]));
                        }
                        callback(nachrichten);
                    }
                }
            });


        },
        handleMessage: function (client, data) {

            var nachricht, sqlNachricht;

            if (data.t == this.messageType.getAll) {
                dataController.antwortNachricht.getAllAdminNachrichten(function(nachrichten){
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: nachrichten});
                })

            } else if (data.t == this.messageType.update) {
                nachricht = data.a;
                if (nachricht) {

                    sqlNachricht = dataController.antwortNachricht.convertToSQL(nachricht);

                    dataController.mysql.query("UPDATE Jobnachrichtgesendet SET ? WHERE id = ? ", [sqlNachricht, sqlNachricht.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.antwortNachricht.informOtherClients(client);
                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {


                nachricht = data.a;
                if (nachricht) {
                    dataController.mysql.query('DELETE FROM Jobnachrichtgesendet WHERE id = ?', nachricht.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.antwortNachricht.informOtherClients(client);
                        }
                    });
                }


            }
        }, informOtherClients: function (client) {

            if (dataController.adminController.clients.length > 1) {

                dataController.antwortNachricht.getAllAdminNachrichten(function (nachrichten) {

                    var clients = dataController.adminController.clients.filter(function (element) {
                        return (element.socket != client.socket)
                    });

                    clients.forEach(function (actClient) {
                        actClient.socket.emit('message', {t: dataController.antwortNachricht.messageType.updateOthers, a: nachrichten});
                    });

                })


            }

        }
    }

}

module.exports = dataController;