/**
 * dataController.
 *
 * >>Description<<
 *
 * @author Manfred
 * @date 21.11.14 - 12:26
 * @copyright munichDev UG
 */


dataController = {
    mysql: null,
    adminController:null,
    init: function (mysql,adminController) {
        this.mysql = mysql;
        this.adminController = adminController;

    },
    handleMessage: function (client, data) {

        console.log("Website: Message " + data.t)
        if (data.t.substr(0, 1) == "l") {
            dataController.lieferant.handleMessage(client, data)
        }else if  (data.t.substr(0, 1) == "t") {
            dataController.termin.handleMessage(client, data)
        }
    },

    lieferant: {
        messageType: {
            getAll: "lga",
            create: "lc",
            update: "lu",
            delete: "ld",
            get: "lg",
            updateOthers:"luo"
        },
        convertFromSQL: function (sqlLieferant) {
            return {
                id: sqlLieferant.id,
                vorname: sqlLieferant.Vorname,
                name: sqlLieferant.Name,
                telefon:  sqlLieferant.Telefon,
                email:  sqlLieferant.EMail,
                adresse:  sqlLieferant.Adresse,
                notizen:  sqlLieferant.Notizen
            }

        },
        convertToSQL: function (lieferant) {
            return {
                id: lieferant.id,
                Vorname: lieferant.vorname,
                Name: lieferant.name,
                Telefon: lieferant.telefon,
                EMail: lieferant.email,
                Adresse: lieferant.adresse,
                Notizen: lieferant.notizen
            }
        },
        handleMessage: function (client, data) {
            var lieferant, sqlLieferant;

            if (data.t == this.messageType.getAll) {
                dataController.mysql.query('SELECT * FROM Lieferanten', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var lieferanten = [];
                            for (var i = 0; i < rows.length; i++) {
                                lieferanten.push(dataController.lieferant.convertFromSQL(rows[i]));
                            }
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: lieferanten});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                lieferant = data.l;
                if (lieferant) {
                    sqlLieferant = dataController.lieferant.convertToSQL(lieferant);
                    dataController.mysql.query('INSERT INTO Lieferanten SET ?', sqlLieferant, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.lieferant.informOtherClients(client);



                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                lieferant = data.l;

                if (lieferant) {

                    sqlLieferant = dataController.lieferant.convertToSQL(lieferant);
                    dataController.mysql.query("UPDATE Lieferanten SET ? WHERE id = ? ", [sqlLieferant, sqlLieferant.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(client);

                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                lieferant = data.l;
                if (lieferant) {
                    dataController.mysql.query('DELETE FROM Lieferanten WHERE id = ?', lieferant.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(client);


                        }
                    });
                }
            }

        },informOtherClients:function(client){

            if( dataController.adminController.clients.length>1){


                //Send list of all Lieferanten to ohter clients
                dataController.mysql.query('SELECT * FROM Lieferanten', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var lieferanten = [];
                            for (var i = 0; i < rows.length; i++) {
                                lieferanten.push(dataController.lieferant.convertFromSQL(rows[i]));
                            }
                            var clients = dataController.adminController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {

                                actClient.socket.emit('message', {t: dataController.lieferant.messageType.updateOthers, l:lieferanten});

                            });


                        }
                    }
                });

            }

        }

    },
    termin: {
        messageType: {
            getAll: "tga",
            create: "tc",
            update: "tu",
            delete: "td",
            get: "tg",
            updateOthers:"tuo"
        },
        convertFromSQL: function (sqlTermin) {

            var newTermin =  {
                id: sqlTermin.id,
                title: sqlTermin.Title,
                start:sqlTermin.Start,
                allDay:sqlTermin.AllDay,
                notizen: sqlTermin.Notizen,
                lieferant: sqlTermin.Lieferant

            }

            if (sqlTermin.end!="")
                newTermin.end = sqlTermin.End;
            else
                newTermin.end = undefined;

            return newTermin;
        },
        convertToSQL: function (termin) {

            return {
                id: termin.id,
                Title: termin.title,
                Start:termin.start,
                End:termin.end,
                AllDay:termin.allDay,
                Notizen: termin.notizen,
                Lieferant: termin.lieferant

            }

        },
        handleMessage: function (client, data) {
            var termin, sqlTermin;

            if (data.t == this.messageType.getAll) {
                dataController.mysql.query('SELECT * FROM Termine', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var termine = [];
                            for (var i = 0; i < rows.length; i++) {
                                termine.push(dataController.termin.convertFromSQL(rows[i]));
                            }
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: termine});
                        }
                    }
                });

            }else if (data.t == this.messageType.create) {

                termin = data.l;
                if (termin) {
                    sqlTermin = dataController.termin.convertToSQL(termin);
                    dataController.mysql.query('INSERT INTO Termine SET ?', sqlTermin, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(client);

                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                termin = data.l;

                if (termin) {

                    sqlTermin = dataController.termin.convertToSQL(termin);

                    dataController.mysql.query("UPDATE Termine SET ? WHERE id = ? ", [sqlTermin, sqlTermin.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(client);
                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                termin = data.l;
                if (termin) {
                    dataController.mysql.query('DELETE FROM Termine WHERE id = ?', termin.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(client);
                        }
                    });
                }
            }
        },informOtherClients:function(client){

            if( dataController.adminController.clients.length>1){


                //Send list of all termine to ohter clients
                dataController.mysql.query('SELECT * FROM Termine', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var termine = [];
                            for (var i = 0; i < rows.length; i++) {
                                termine.push(dataController.termin.convertFromSQL(rows[i]));
                            }




                            var clients = dataController.adminController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {

                                actClient.socket.emit('message', {t: dataController.termin.messageType.updateOthers, e:termine});

                            });


                        }
                    }
                });

            }

        }
    }

}

module.exports = dataController;