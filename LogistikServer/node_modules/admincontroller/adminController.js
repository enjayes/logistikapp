/**
 * websiteController.
 *
 *
 *
 *
 * @date 21.11.14 - 00:35
 *
 */


var WebsiteClient = function ( socket,id) {
    this.socket = socket;
    this.id = id;
}


adminController = {
    preferences:null,
    io:null,
    app:null,
    express:null,
    http:null,
    dataController:null,
    messageType:{
        connection:"c",
        normal:"n"
    },
    clients: [],
    init:function(preferences,dataController,io,app,express){
       this.preferences = preferences;
       this.io = io;
       this.app = app;
       this.express = express;

       //Start Admin Site, serve Resources under /admin/ statically
       this.app.use('/', express.static(preferences.serverdirectory + '/LogistikAdmin'));

        //Data Controller
       this.dataController = dataController

    },
    messageRecieved:function(socket,msg){
        //Connection
        if(msg.t==adminController.messageType.connection){
            adminController.clientConnected(socket,msg.clientid);

             socket.emit('message', {t: "cb",callback:msg.data.callback});

            //Normal Message
        }else if(msg.t==adminController.messageType.normal){
            var client = adminController.getClient(socket,msg.clientid);
            if(client&&client.length>0)
              this.dataController.handleMessage(this,client[0],msg.data);
        }
    }
    ,clientConnected: function (socket, clientid) {
        console.log("Website: Connected")

        var client = new WebsiteClient(socket,clientid);
        this.removeClient(client);
        this.handleFutureDisconnect(client);
        adminController.clients.push(client);



    },
    getClient:function(socket,id){
        return adminController.clients.filter(function (element) {
            return (!socket||element.socket == socket)&&(!id||element.id == id)
        });
    }
    ,
    removeClient: function (client) {
        //Remove Element from List
        adminController.clients = adminController.clients.filter(function (element) {
            return (element.socket != client.socket)
        });

    },
    handleFutureDisconnect: function (client) {
        client.socket.on('disconnect', function () {
            adminController.clientDisonnected(client);
        });
    },

    clientDisonnected: function (client) {
        console.log("Website: Disconnected")
        this.removeClient(client.socket);

    }


}


module.exports = adminController;


