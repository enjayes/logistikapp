/**
 * dataController
 *
 *
 *
 *
 * @date 21.11.14 - 12:26
 *
 */


dataController = {
    mysql: null,
    mysqlConnection: null,
    CryptoJS: null,
    momentJS:null,

    init: function (preferences, CryptoJS, momentJS) {

        //Load mysql
        this.mysql = require('mysql');
        //Connect to MySql database
        this.mysqlConnection = this.mysql.createConnection(preferences.mysql);
        this.mysqlConnection.connect(function (err) {
            if (err) throw err;
            console.log('Connected to MySql database');
        });

        this.CryptoJS = CryptoJS;
        this.momentJS = momentJS;




    },
    handleMessage: function (clientController, client, data) {
		if(data.t){
			console.log("Handle: Message " + data.t)

			if (data.t.substr(0, 1) == "l") {
				dataController.lieferant.handleMessage(clientController, client, data)
			} else if (data.t.substr(0, 1) == "t") {
				dataController.termin.handleMessage(clientController, client, data)
			} else if (data.t.substr(0, 1) == "n") {
				dataController.nachricht.handleMessage(clientController, client, data)
			} else if (data.t.substr(0, 1) == "a") {
				dataController.antwortNachricht.handleMessage(clientController, client, data)
			} else if (data.t.substr(0, 1) == "j") {
				dataController.job.handleMessage(clientController, client, data)
			} else if (data.t.substr(0, 1) == "m") {
				dataController.maerkte.handleMessage(clientController, client, data)

			} else if (data.t.substr(0, 1) == "s") {
				dataController.statistics.handleMessage(clientController, client, data)
			} else if (data.t.substr(0, 1) == "p") {
            dataController.phone.handleMessage(clientController, client, data)
            }
		}
		else{
			console.log("Handle: Unknown Message Type");
		}


    },

    lieferant: {
        messageType: {
            login: "ll",
            getNewPin: "lgnp",
            getAll: "lga",
            create: "lc",
            update: "lu",
            delete: "ld",
            get: "lg",
            updateOthers: "luo",
        },
        handleMessage: function (clientController, client, data) {
            var lieferant;
            if (data.t == this.messageType.login) {

                dataController.mysqlConnection.query("SELECT * FROM Lieferanten WHERE PinSHA = ? ", data.p, function (err, rows, fields) {

                    if (err) {
                        console.log("MYSQL ERROR: " + err);
                        client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: null});
                    }
                    else {
                        //Pin doesnt exists yet
                        if (rows && rows.length == 1) {
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: rows[0]});
                        } else
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: null});
                    }
                });


            } else if (data.t == this.messageType.getNewPin) {
                lieferant = data.l;
                if (lieferant) {

                    var generateNewPin = function () {

                        //Create Pin 4 digits
                        var pin = "" + (Math.floor(Math.random() * 9998) + 1);
                        var pad = "0000";
                        pin = pad.substring(0, pad.length - pin.length) + pin;

                        dataController.mysqlConnection.query("SELECT * FROM Lieferanten WHERE Pin = ? ", pin, function (err, rows, fields) {

                            if (err)
                                console.log("MYSQL ERROR: " + err);
                            else {
                                //Pin doesnt exists yet
                                if (rows && rows.length == 0) {

                                    lieferant.Pin = pin;
                                    lieferant.PinSHA = "" + dataController.CryptoJS.SHA3("dfjo58443pggd9gudf9" + pin, { outputLength: 512 });

                                    dataController.mysqlConnection.query("UPDATE Lieferanten SET ? WHERE id = ? ", [lieferant, lieferant.id], function (err, result) {
                                        if (err)
                                            console.log("MYSQL ERROR: " + err);
                                        else {

                                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: lieferant});

                                            dataController.lieferant.informOtherClients(clientController, client);

                                        }

                                    });

                                } else {
                                    generateNewPin();
                                }

                            }
                        });
                    }
                    generateNewPin();


                }

            } else if (data.t == this.messageType.getAll) {

                dataController.mysqlConnection.query('SELECT * FROM Lieferanten', function (err, rows, fields) {

                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {

                        if (rows) {

                            var lieferanten = rows;
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: lieferanten});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                lieferant = data.l;
                if (lieferant) {
                    dataController.mysqlConnection.query('INSERT INTO Lieferanten SET ?', lieferant, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.lieferant.informOtherClients(clientController, client);


                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                lieferant = data.l;

                if (lieferant) {

                    dataController.mysqlConnection.query("UPDATE Lieferanten SET ? WHERE id = ? ", [lieferant, lieferant.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(clientController, client);

                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                lieferant = data.l;
                if (lieferant) {
                    dataController.mysqlConnection.query('DELETE FROM Lieferanten WHERE id = ?', lieferant.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.lieferant.informOtherClients(clientController, client);


                        }
                    });
                }
            }

        }, informOtherClients: function (clientController, client) {

            if (clientController.clients.length > 1) {

                //Send list of all Lieferanten to ohter clients
                dataController.mysqlConnection.query('SELECT * FROM Lieferanten', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var lieferanten = rows;

                            var clients = clientController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {
                                actClient.socket.emit('message', {t: dataController.lieferant.messageType.updateOthers, l: lieferanten});
                            });

                        }
                    }
                });

            }

        }

    },
    termin: {
        messageType: {
            getAll: "tga",
            getRange: "tgr",
            create: "tc",
            update: "tu",
            delete: "td",
            get: "tg",
            updateOthers: "tuo"
        },

        handleMessage: function (clientController, client, data) {

            var termin;

            if (data.t == this.messageType.getAll) {
                dataController.mysqlConnection.query('SELECT * FROM Termine', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var termine = rows;

                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: termine});
                        }
                    }
                });

            } else if (data.t == this.messageType.getRange) {

                var start = data.start;
                var end = data.end;


                dataController.mysqlConnection.query('SELECT * FROM Termine WHERE (RepeatDays = 0 AND StartMilli >= ? AND ((EndMilli <= ? AND EndMilli <> 0) OR (StartMilli <= ? AND EndMilli = 0 ))) OR (RepeatDays > 0)   ', [start, end, end], function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            console.log(rows.length)

                            var termine = [];

                            Date.prototype.yyyymmdd = function() {
                                var yyyy = this.getFullYear().toString();
                                var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based
                                var dd  = this.getDate().toString();
                                return yyyy +"-"+ (mm[1]?mm:"0"+mm[0]) +"-"+ (dd[1]?dd:"0"+dd[0]); // padding
                            };

                            for (var i = 0; i < rows.length; i++) {
                                console.log("------------------------------")
                                console.log(rows[i].RepeatDays)

                                var event = rows[i];
                                if (event.RepeatDays > 0) {


                                    start = start- 86400000*32;
                                    end = end+ 86400000*32;

                                    for(var day = start;day<= end; day = day+86400000)  {

                                       var startDiff =  event.StartMilli - day;
                                       console.log("")

                                       console.log(startDiff)

                                       if(startDiff>0)
                                        startDiff = startDiff%(86400000*event.RepeatDays);
                                       else  {
                                           startDiff = startDiff-86399999;

                                           startDiff = 86399999+startDiff%(86400000*event.RepeatDays);

                                       }

                                       console.log(startDiff)


                                       if(startDiff>=0 && startDiff< 86400000){
                                           console.log(":::::::::::::::::::::::")
                                           console.log(dataController.momentJS(day).format())
                                           var repeatEvent = JSON.parse(JSON.stringify(event));

                                           var oldStartMilli =  repeatEvent.StartMilli;
                                           repeatEvent.StartMilli =   day+ startDiff;
                                           repeatEvent.Start = dataController.momentJS(repeatEvent.StartMilli).zone(repeatEvent.Start).format();

                                           console.log(repeatEvent.Start)
                                           console.log(( new Date(repeatEvent.StartMilli)).yyyymmdd() )
                                           if(repeatEvent.EndMilli>0)  {
                                              var diffStartSource =  repeatEvent.StartMilli- oldStartMilli;
                                               repeatEvent.EndMilli = repeatEvent.EndMilli+diffStartSource;
                                               repeatEvent.End =  dataController.momentJS(repeatEvent.EndMilli).zone(repeatEvent.Start).format();
                                           }
                                           console.log("")
                                           console.log("")
                                           console.log("")

                                           termine.push(repeatEvent);
                                       }


                                   }


                                } else
                                    termine.push(rows[i]);
                            }


                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: termine});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {

                termin = data.l;



                if (termin) {
                    dataController.mysqlConnection.query('INSERT INTO Termine SET ?', termin, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(clientController);

                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                termin = data.l;

                if (termin) {
                    dataController.mysqlConnection.query("UPDATE Termine SET ? WHERE id = ? ", [termin, termin.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(clientController);
                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                termin = data.l;
                if (termin) {
                    dataController.mysqlConnection.query('DELETE FROM Termine WHERE id = ?', termin.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.termin.informOtherClients(clientController);
                        }
                    });
                }
            }
        }, informOtherClients: function (clientController, client) {

            if (clientController.clients.length > 1) {

                var clients = clientController.clients.filter(function (element) {
                    return (!client||element.socket != client.socket)
                });

                clients.forEach(function (actClient) {

                    actClient.socket.emit('message', {t: dataController.termin.messageType.updateOthers});

                });


            }

        }
    },

    nachricht: {
        messageType: {
            getAll: "nga",
            create: "nc",
            delete: "nd",
            updateOthers: "nuo",
            markRead: "nm",
            get: "ng"

        },
        maxNachrichten: 1000,
        //Get all the Messages, joins messages and recipients
        getAllAdminNachrichten: function (callback,start,stop) {
            if (!callback)
                return;


            dataController.mysqlConnection.query('SELECT * FROM Adminnachrichtgesendet ORDER BY datum DESC', function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {

                    if (rows) {



                        var length = rows.length;


                        rows = rows.slice(start, stop);

                        var getLieferanten = function (nachrichten, position) {

                            if (position == nachrichten.length)
                                callback([],0);
                            else {

                                dataController.mysqlConnection.query('SELECT * FROM Adminlieferantnachricht WHERE nachrichtenid = ?', nachrichten[position].id, function (err, rows, fields) {
                                    if (err)
                                        console.log("MYSQL ERROR: " + err);
                                    else {
                                        if (rows) {
                                            nachrichten[position].lieferanten = [];
                                            for (var i = 0; i < rows.length; i++) {
                                                nachrichten[position].lieferanten.push({lieferantid: rows[i].lieferantid, read: rows[i].read == 1 ? true : false});

                                            }

                                            if (position == nachrichten.length - 1) {




                                                callback(nachrichten,length)
                                            }
                                            else
                                                getLieferanten(nachrichten, position + 1);
                                        }
                                    }
                                });
                            }
                        }
                        getLieferanten(rows, 0);

                    }
                }
            });
        },
        //Get all the Messages of Lieferant, joins messages and recipients
        getLieferantenNachrichten: function (lid,callback) {
            if (!callback)
                return;


            dataController.mysqlConnection.query("SELECT * FROM Adminlieferantnachricht WHERE (lieferantid = ? AND `read` = 0)", lid ,function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {

                    if (rows) {

                        rows = rows.slice(0, dataController.nachricht.maxNachrichten);

                        var getNachrichten = function (nachrichten, position) {

                            if (position == nachrichten.length)
                                callback([]);
                            else {

                                console.log("nachricht "+position+": " +nachrichten[position].read );
                                if(nachrichten[position].read==0) {
                                    dataController.mysqlConnection.query('SELECT * FROM Adminnachrichtgesendet WHERE id = ?', nachrichten[position].nachrichtenid, function (err, rows, fields) {
                                        if (err)
                                            console.log("MYSQL ERROR: " + err);
                                        else {
                                            if (rows) {
                                                if (rows.length > 0) {
                                                    nachrichten[position].nachricht = rows[0].nachricht;
                                                    nachrichten[position].id = nachrichten[position].nachrichtenid;
                                                    delete  nachrichten[position].nachrichtenid;
                                                    nachrichten[position].lieferanten = nachrichten[position].lieferantid;
                                                    delete  nachrichten[position].lieferantid;
                                                }
                                                if (position == nachrichten.length - 1) {
                                                    callback(nachrichten)
                                                }
                                                else
                                                    getNachrichten(nachrichten, position + 1);
                                            }
                                        }
                                    });
                                }
                                else{
                                    if (position == nachrichten.length - 1) {
                                        callback(nachrichten)
                                    }
                                    else
                                        getNachrichten(nachrichten, position + 1);
                                }
                            }
                        }
                        getNachrichten(rows, 0);

                    }
                }
            });
        }

        , handleMessage: function (clientController, client, data) {

            var nachricht;

            if (data.t == this.messageType.getAll) {

                var start = data.st||0;
                var stop = data.sp||dataController.nachricht.maxNachrichten;


                dataController.nachricht.getAllAdminNachrichten(function (nachrichten,length) {
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: {n:nachrichten,l:length}});

                },start,stop)
            }
            else  if (data.t == this.messageType.get) {

                    dataController.nachricht.getLieferantenNachrichten(data.lid,function (nachrichten) {
                        client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: nachrichten});

                    })

            } else if (data.t == this.messageType.create) {

                nachricht = data.n;
                if (nachricht) {

                    var sqlNachricht = JSON.parse(JSON.stringify(nachricht));
                    delete sqlNachricht.lieferanten

                    dataController.mysqlConnection.query('INSERT INTO Adminnachrichtgesendet SET ?', sqlNachricht, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            for (var i = 0; i < nachricht.lieferanten.length; i++) {
                                var lieferantId = nachricht.lieferanten[i].lieferantid;
                                var insertData = {lieferantid: lieferantId, nachrichtenid: nachricht.id};
                                dataController.mysqlConnection.query('INSERT INTO Adminlieferantnachricht SET ?', insertData, function (err, result) {
                                    if (err)
                                        console.log("MYSQL ERROR: " + err);
                                    else {

                                        dataController.nachricht.informOtherClients(clientController, client);

                                    }
                                });

                            }

                        }
                    });
                }
            } else if (data.t == this.messageType.markRead) {

                var nachrichtenid = data.nid;
                var lieferantid = data.lid;
                if (nachrichtenid && lieferantid) {
                    var updateData = {read:1,lieferantid: lieferantid, nachrichtenid: nachrichtenid};
                    dataController.mysqlConnection.query("UPDATE Adminlieferantnachricht SET ? WHERE lieferantid = ? AND nachrichtenid = ? ", [updateData,lieferantid, nachrichtenid], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.nachricht.informOtherClients(clientController);
                        }
                    });
                }

            } else if (data.t == this.messageType.delete) {

                nachricht = data.n;
                if (nachricht) {
                    dataController.mysqlConnection.query('DELETE FROM Adminnachrichtgesendet WHERE id = ?', nachricht.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.mysqlConnection.query('DELETE FROM Adminlieferantnachricht WHERE nachrichtenid = ?', nachricht.id, function (err, result) {
                                if (err)
                                    console.log("MYSQL ERROR: " + err);
                                else {

                                    dataController.nachricht.informOtherClients(clientController, client);

                                }
                            });
                        }
                    });
                }


            }
        }, informOtherClients: function (clientController, client) {

            /*
            if (clientController.clients.length > 1) {

                dataController.nachricht.getAllAdminNachrichten(function (nachrichten) {

                    var clients = clientController.clients.filter(function (element) {
                        return (!client || element.socket != client.socket)
                    });

                    clients.forEach(function (actClient) {
                        actClient.socket.emit('message', {t: dataController.nachricht.messageType.updateOthers, n: nachrichten});
                    });

                })


            }
             */
        }

    },
    antwortNachricht: {
        messageType: {
            getAll: "aga",
            update: "au",
            delete: "ad",
            updateOthers: "auo"
        },
        maxNachrichten: 1000,
        getAllAdminNachrichten: function (callback,start,stop) {
            if (!callback)
                return;
            dataController.mysqlConnection.query('SELECT * FROM Lieferantnachrichtgesendet  ORDER BY datum DESC', function (err, rows, fields) {
                if (err)
                    console.log("MYSQL ERROR: " + err);
                else {
                    if (rows) {
                        rows = rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows.concat(rows))))))))))))))))))))))))))))))))))))))))))))))))))))
                        var length = rows.length;
                        console.log(start)
                        console.log(stop)

                        rows = rows.slice(start, stop);
                        callback(rows,length);
                    }
                }
            });

        },
        handleMessage: function (clientController, client, data) {

            var nachricht;

            if (data.t == this.messageType.getAll) {
                var start = data.st||0;
                var stop = data.sp||dataController.antwortNachricht.maxNachrichten;

                dataController.antwortNachricht.getAllAdminNachrichten(function (nachrichten,length) {
                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: {n:nachrichten,l:length}});
                },start,stop);

            } else if (data.t == this.messageType.update) {
                nachricht = data.a;
                if (nachricht) {

                    dataController.mysqlConnection.query("UPDATE Lieferantnachrichtgesendet SET ? WHERE id = ? ", [nachricht, nachricht.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.antwortNachricht.informOtherClients(clientController, client);
                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {


                nachricht = data.a;
                if (nachricht) {
                    dataController.mysqlConnection.query('DELETE FROM Lieferantnachrichtgesendet WHERE id = ?', nachricht.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.antwortNachricht.informOtherClients(clientController, client);
                        }
                    });
                }


            }
        }, informOtherClients: function (clientController, client) {
           /*
            if (clientController.clients.length > 1) {

                dataController.antwortNachricht.getAllAdminNachrichten(function (nachrichten) {

                    var clients = clientController.clients.filter(function (element) {
                        return (!client || element.socket != client.socket)
                    });

                    clients.forEach(function (actClient) {
                        actClient.socket.emit('message', {t: dataController.antwortNachricht.messageType.updateOthers, a: nachrichten});
                    });

                })
            }
            */
        }
    },
    phone: {
        callCLient:null,
        twilio:null,
        messageType: {
            callNumber: "pcn",
            sendMessage: "psm"

        },
        handleMessage: function (clientController, client, data) {
            if( this.callClient==null || this.callClient == undefined){
                this.twilio = require('twilio');
                this.callClient = new this.twilio.RestClient('AC511bde017bd79ae7d6dee54060f89dad', '3b9bc40e6bc9735f91939a5cce50e7da');
            }
            if (data.t == this.messageType.sendMessage) {
                console.log("sendMessage");
                console.log(data.n);
                console.log(data.text);
                this.callClient.sms.messages.create({
                    to: data.n,
                    from:'+4915735981417',
                    body:data.text
                    }, function(error, message) {
                        if (!error) {
                            console.log('Success! The SID for this SMS message is:');
                            console.log(message.sid);
                            console.log('Message sent on:');
                            console.log(message.dateCreated);
                        } else {
                            console.log('There was an error.');
                        }
                    }
                );
            }
            else if (data.t == this.messageType.callNumber) {

                console.log("makeCall");
                console.log(data.n);
                console.log(data.text);

                this.callClient.makeCall({

                    to: data.n, // Any number Twilio can call
                    from:'+4915735981417', // A number you bought from Twilio and can use for outbound communication
                    url: "http://twimlets.com/echo?Twiml=%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%3CResponse%3E%3CSay%20voice%3D%22alice%22%20language%3D%22de-DE%22%3E%20"+encodeURI(data.text)+"%20%3C%2FSay%3E%3C%2FResponse%3E&" // A URL that produces an XML document (TwiML) which contains instructions for the call

                }, function(err, responseData) {
                    console.log("call done!");
                    //executed when the call has been initiated.

                    if (err) {
                        console.log(err);
                        console.log('Oops! There was an error.');
                    }
                    console.log(responseData.from); // outputs "+14506667788"

                });
            }
        }
    }
    , job: {
        messageType: {
            getAll: "jga",
            getTemplates: "jt",
            create: "jc",
            update: "ju",
            delete: "jd",
            get: "jg",
            updateOthers: "juo"
        },
        handleMessage: function (clientController, client, data) {
            var job;


            if (data.t == this.messageType.getAll) {


                dataController.mysqlConnection.query('SELECT * FROM Jobs', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var jobs = rows;

                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                        }
                    }
                });

            } else if (data.t == this.messageType.getTemplates) {

                dataController.mysqlConnection.query('SELECT * FROM Jobs WHERE lieferanten_id = "' + data.lid + '" AND NOT template_name = ""', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        var jobs = null;
                        if (rows) {
                            jobs = rows;
                        }
                        dataController.mysqlConnection.query('SELECT * FROM jobs WHERE lieferanten_id = "' + data.lid + '" ORDER BY timestamp_start DESC LIMIT 1', function (err, rows, fields) {
                            if (err)
                                console.log("MYSQL ERROR: " + err);
                            else {
                                if (rows && rows.length == 1) {
                                    if (jobs) {
                                        jobs.unshift(rows[0]);
                                    }
                                    else {
                                        jobs = rows;
                                    }
                                    client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                                }
                                else {
                                    if (jobs) {
                                        client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: jobs});
                                    }
                                }
                            }
                        });
                    }
                });

            }
            else if (data.t == this.messageType.get) {

                var jobId = data.j;
                dataController.mysqlConnection.query('SELECT * FROM Jobs WHERE id = ? ', jobId, function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows && rows.length == 1) {
                            var job = rows[0];
                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: job});
                        }
                    }
                });

            } else if (data.t == this.messageType.create) {


                job = data.j;

                if (job) {
                    dataController.mysqlConnection.query('INSERT INTO Jobs SET ?', job, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {

                            dataController.job.informOtherClients(clientController, client);


                        }
                    });
                }
            } else if (data.t == this.messageType.update) {
                job = data.j;

                if (job) {

                    dataController.mysqlConnection.query("UPDATE Jobs SET ? WHERE id = ? ", [job, job.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(clientController, client);

                        }

                    });
                }
            } else if (data.t == this.messageType.delete) {

                job = data.l;
                if (job) {
                    dataController.mysqlConnection.query('DELETE FROM Jobs WHERE id = ?', job.id, function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(clientController, client);


                        }
                    });
                }
            }

        }, informOtherClients: function (clientController, client) {

            if (clientController.clients.length > 1) {

                //Send list of all Jobs to ohter clients
                dataController.mysqlConnection.query('SELECT * FROM Jobs', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var jobs = rows;

                            var clients = clientController.clients.filter(function (element) {
                                return (element.socket != client.socket)
                            });

                            clients.forEach(function (actClient) {

                                actClient.socket.emit('message', {t: dataController.job.messageType.updateOthers, l: jobs});

                            });

                        }
                    }
                });

            }

        }

    }, maerkte: {
        messageType: {
            getAll: "mga",
            update: "mu"
        },
        handleMessage: function (clientController, client, data) {
            var markt;

            if (data.t == this.messageType.getAll) {

                dataController.mysqlConnection.query('SELECT * FROM Maerkte', function (err, rows, fields) {
                    if (err)
                        console.log("MYSQL ERROR: " + err);
                    else {
                        if (rows) {

                            var maerkte = rows;

                            client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: maerkte});
                        }
                    }
                });

            } else if (data.t == this.messageType.update) {
                markt = data.m;
                if (markt) {

                    dataController.mysqlConnection.query("UPDATE Maerkte SET ? WHERE id = ? ", [markt, markt.id], function (err, result) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else {
                            dataController.job.informOtherClients(clientController, client);

                        }

                    });
                }
            }
        }
    },
    statistics: {
        messageType: {
            get: "sg"
        },
        handleMessage: function (clientController, client, data) {


            if (data.t == this.messageType.get) {

                var statistics = {};

                //Statistc Methods---------------------

                var countBesuche = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM Jobs WHERE besuch = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.besuche = rows[0].count;
                        callback(statistics)
                    });
                }

                var countBestellung = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM Jobs WHERE bestellung = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.bestellungen = rows[0].count;
                        callback(statistics)
                    });
                }


                var countVerraumung = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM Jobs WHERE verraeumung = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.verraeumungen = rows[0].count;
                        callback(statistics)
                    });
                }

                var countAustausch = function (statistics, callback) {
                    dataController.mysqlConnection.query('SELECT COUNT(*) AS count FROM Jobs WHERE austausch = 1', function (err, rows, fields) {
                        if (err)
                            console.log("MYSQL ERROR: " + err);
                        else if (rows)
                            statistics.austausche = rows[0].count;
                        callback(statistics)
                    });
                }


                //Chain Methods


                countBesuche(statistics,
                    function (statistics) {
                        countBestellung(statistics,
                            function (statistics) {
                                countVerraumung(statistics,
                                    function (statistics) {
                                        countAustausch(statistics,
                                            //Return statistics
                                            function (statistics) {
                                                client.socket.emit('message', {t: "cb", callback: data.callback, cbdata: statistics});
                                            })
                                    })
                            })
                    });


            }
        }
    }



}




module.exports = dataController;